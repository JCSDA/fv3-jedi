version: 0.2

env:
  shell: bash
  parameter-store:
    GIT_USER: "/CodeBuild/Git_USER"
    GIT_PASS: "/CodeBuild/Git_PASS"

phases:
  install:
    commands:
      - echo Executing install phase
      - echo $CODEBUILD_RESOLVED_SOURCE_VERSION
      - echo $CODEBUILD_SOURCE_REPO_URL
      - echo $CODEBUILD_SOURCE_VERSION

      - echo $CODEBUILD_WEBHOOK_MERGE_COMMIT
      - echo $CODEBUILD_WEBHOOK_PREV_COMMIT
      - echo $CODEBUILD_WEBHOOK_HEAD_REF
      - echo $CODEBUILD_WEBHOOK_ACTOR_ACCOUNT_ID
      - echo $CODEBUILD_WEBHOOK_EVENT
      - echo $CODEBUILD_WEBHOOK_TRIGGER
      - echo $CODEBUILD_WEBHOOK_BASE_REF

      # read cdash url from s3
      - wget https://ci-test-cdash-url.s3.amazonaws.com/cdash_url.txt
      - CDASH_URL=$(cat cdash_url.txt)

      # Codebuild only runs on PUSH events if HEAD_REF
      # is refs/heads/develop (merge to develop). In this
      # case CODEBUILD_GIT_BRANCH="develop"

      - if [ "$CODEBUILD_WEBHOOK_EVENT" = "PUSH" ];
        then export CODEBUILD_GIT_BRANCH="develop";
        echo "Merging to develop";
        else export CODEBUILD_GIT_BRANCH=${CODEBUILD_WEBHOOK_HEAD_REF#refs/heads/};
        fi

      # Determine the git base branch. This is the branch we are merging into.
      # It can be develop or another branch. It will be used as a fall back branch in clone.sh
      - export GIT_BASE_BRANCH=${CODEBUILD_WEBHOOK_BASE_REF#refs/heads/}

      - echo "GIT_BASE_BRANCH=${GIT_BASE_BRANCH}"
      - echo "CODEBUILD_GIT_BRANCH=${CODEBUILD_GIT_BRANCH}"
      - echo "CODEBUILD_SOURCE_VERSION=${CODEBUILD_SOURCE_VERSION}"

  pre_build:
    commands:
      - echo Executing pre_build phase
      - mkdir /build_container
      - mkdir /jcsda
      - cd CI
      - git lfs install # creates .gitconfig

      #  Set crtm branch name
      - export CRTM_JEDI_BRANCH="release/crtm_jedi"

      # when testing develop branch
      - if [ "$CODEBUILD_GIT_BRANCH" = "develop" ];
        then export CODEBUILD_GIT_BRANCH_CRTM=${CRTM_JEDI_BRANCH};
        export CODEBUILD_GIT_BRANCH_FV3CORE="release-stable";
        else export CODEBUILD_GIT_BRANCH_CRTM=${CODEBUILD_GIT_BRANCH};
        export CODEBUILD_GIT_BRANCH_FV3CORE=${CODEBUILD_GIT_BRANCH};
        fi

      # if merging to develop
      - if [ "$GIT_BASE_BRANCH" = "develop" ];
        then export GIT_BASE_BRANCH_CRTM=${CRTM_JEDI_BRANCH};
        export GIT_BASE_BRANCH_FV3CORE="release-stable";
        else export GIT_BASE_BRANCH_CRTM=${GIT_BASE_BRANCH};
        export GIT_BASE_BRANCH_FV3CORE=${GIT_BASE_BRANCH};
        fi

      # Upload branch name and commit sha as CodeBuild artifact to S3
      - mkdir -p /jcsda/artifacts
      - echo ${CODEBUILD_GIT_BRANCH} > /jcsda/artifacts/branch_name.txt
      - echo ${CODEBUILD_RESOLVED_SOURCE_VERSION} > /jcsda/artifacts/commit_sha.txt

      #  Setting git credentials
      - sed -i '/ssh/d' ~/.gitconfig
      - sed '/instead/d' ~/.gitconfig
      - git config --global credential.helper store
      - touch ~/.git-credentials
      - chmod 0700 ~/.git-credentials
      - echo "https://${GIT_USER}:${GIT_PASS}@github.com" >~/.git-credentials

      # FV3-JEDI (testing repo)
      - ./clone.sh jcsda-internal/fv3-jedi $CODEBUILD_GIT_BRANCH /jcsda/fv3-bundle fv3-jedi ${GIT_BASE_BRANCH} develop

      # fv3-jedi-lm
      - ./clone.sh jcsda-internal/fv3-jedi-linearmodel $CODEBUILD_GIT_BRANCH /jcsda/fv3-bundle fv3-jedi-lm ${GIT_BASE_BRANCH} develop

      # crtm
      - ./clone.sh jcsda-internal/crtm $CODEBUILD_GIT_BRANCH_CRTM /jcsda/fv3-bundle crtm ${GIT_BASE_BRANCH_CRTM} $CRTM_JEDI_BRANCH

      # ioda
      - ./clone.sh jcsda-internal/ioda $CODEBUILD_GIT_BRANCH /jcsda/fv3-bundle ioda ${GIT_BASE_BRANCH} develop

      # saber
      - ./clone.sh jcsda-internal/saber $CODEBUILD_GIT_BRANCH /jcsda/fv3-bundle saber ${GIT_BASE_BRANCH} develop

      # oops
      - ./clone.sh jcsda-internal/oops $CODEBUILD_GIT_BRANCH /jcsda/fv3-bundle oops ${GIT_BASE_BRANCH} develop

      # ufo
      - ./clone.sh jcsda-internal/ufo $CODEBUILD_GIT_BRANCH /jcsda/fv3-bundle ufo ${GIT_BASE_BRANCH} develop

      # vader
      - ./clone.sh jcsda-internal/vader $CODEBUILD_GIT_BRANCH /jcsda/fv3-bundle vader ${GIT_BASE_BRANCH} develop

      # femps
      - ./clone.sh jcsda-internal/femps $CODEBUILD_GIT_BRANCH /jcsda/fv3-bundle femps ${GIT_BASE_BRANCH} develop

      # fms
      - ./clone.sh jcsda/FMS $CODEBUILD_GIT_BRANCH_FV3CORE  /jcsda/fv3-bundle fms ${GIT_BASE_BRANCH_FV3CORE} release-stable

      # GFDL_atmos_cubed_sphere
      - ./clone.sh jcsda/GFDL_atmos_cubed_sphere $CODEBUILD_GIT_BRANCH_FV3CORE /jcsda/fv3-bundle fv3 ${GIT_BASE_BRANCH_FV3CORE} release-stable

      #  internal repos
      # geos-aero
      - ./clone.sh jcsda-internal/geos-aero $CODEBUILD_GIT_BRANCH /jcsda/fv3-bundle geos-aero ${GIT_BASE_BRANCH} develop

      # ropp
      - ./clone.sh jcsda-internal/ropp-test $CODEBUILD_GIT_BRANCH /jcsda/fv3-bundle ropp-ufo ${GIT_BASE_BRANCH} develop

      # fv3-jedi-test
      - ./clone.sh jcsda-internal/fv3-jedi-data $CODEBUILD_GIT_BRANCH /jcsda/fv3-bundle fv3-jedi-data ${GIT_BASE_BRANCH} develop

      # move CMakeLists.txt
      - cp CMakeLists.txt /jcsda/fv3-bundle
      - cp -r cmake /jcsda/fv3-bundle/
      - cp /jcsda/fv3-bundle/cmake/CTestConfig.cmake /jcsda/fv3-bundle
      - sed -i "s@CDASH_URL@$CDASH_URL@g" /jcsda/fv3-bundle/CTestConfig.cmake

  build:
    on-failure: CONTINUE
    commands:
      - echo Executing build phase
      - echo $CODEBUILD_BUILD_SUCCEEDING
      - export BUILD_STATUS="0"
      - echo $BUILD_STATUS

      # configure and build
      - cd /build_container
      - source /etc/profile.d/z10_spack_environment.sh
      # for jedi-cmake
      - export jedi_cmake_ROOT=/opt/view
      - ecbuild -Wno-dev -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCDASH_OVERRIDE_SITE=CodeBuild -DCDASH_OVERRIDE_GIT_BRANCH=$CODEBUILD_GIT_BRANCH -DCTEST_UPDATE_VERSION_ONLY=FALSE -DCDASH_OVERRIDE_SYSTEM_NAME=ClangContainer -DBUNDLE_SKIP_GEOS-AERO=OFF -DBUNDLE_SKIP_ROPP-UFO=OFF -DBUILD_LARGE_TESTS=OFF /jcsda/fv3-bundle/
      - cd fv3-jedi
      - cp ../DartConfiguration.tcl .
      - sed -i 's/fv3-bundle/fv3-bundle\/fv3-jedi/' DartConfiguration.tcl
      - sed -i 's/build_container/build_container\/fv3-jedi/' DartConfiguration.tcl
      - cat DartConfiguration.tcl
      - make -j8

      - if [ "$CODEBUILD_BUILD_SUCCEEDING" = "1" ];
        then export BUILD_STATUS="1";
        echo "Build passed";
        fi
      - echo $BUILD_STATUS

      - cd /build_container/fv3-jedi
      - ctest -C RelWithDebInfo -D ExperimentalTest

    finally:
      - cd /build_container/fv3-jedi
      - ctest -C RelWithDebInfo -D ExperimentalSubmit -M Continuous -- --track Continuous --group Continuous

  post_build:
    commands:
      - echo Executing post_build phase
      - echo $CODEBUILD_BUILD_SUCCEEDING
      - echo $BUILD_STATUS

      # find cdash url and upload it as CodeBuild artifact to S3
      - if [ "$BUILD_STATUS" = "1" ];
        then echo "Build & tests passed, find cdash url";
        url=$(bash /jcsda/fv3-bundle/fv3-jedi/CI/cdash-url.sh /build_container/fv3-jedi/Testing $CDASH_URL);
        echo $url;
        echo ${url} > /jcsda/artifacts/cdash-url.txt;
        cat /jcsda/artifacts/cdash-url.txt;
        else echo "Build failed";
        fi

      # rerun failed tests with -VV
      - if [ "$BUILD_STATUS" = "1" ] && [ "$CODEBUILD_BUILD_SUCCEEDING" = "0" ];
        then echo "Build passed, rerunning failed tests";
        cd /build_container/fv3-jedi;
        ctest -VV --rerun-failed;
        fi


artifacts:
  files:
    - '/jcsda/artifacts/*'
  name: fv3-clang-url
